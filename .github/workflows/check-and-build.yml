name: Check Base Image and Build

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Get current base image digest
      id: get_digest
      run: |
        DIGEST=$(docker pull ${{ vars.BASE_IMAGE }} | grep Digest | awk '{print $2}')
        echo "BASE_IMAGE_DIGEST=${DIGEST}" >> $GITHUB_ENV

    - name: Get latest release information
      id: get_latest_release
      run: |
        response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/latest)
        latest_tag=$(echo $response | jq -r .tag_name)
        echo "LATEST_TAG=${latest_tag}" >> $GITHUB_ENV
        latest_body=$(echo $response | jq -r .body)
        echo "LATEST_BODY=${latest_body}" >> $GITHUB_ENV

    - name: Determine next version
      id: next_version
      run: |
        if [ "${LATEST_TAG}" != "null" ]; then
          latest_version=${LATEST_TAG#v}
          major_version=${latest_version%.*}
          minor_version=${latest_version##*.}
          next_minor_version=$((minor_version + 1))
          next_version="${major_version}.${next_minor_version}"
        else
          next_version="1.0"
        fi
        echo "NEXT_VERSION=${next_version}" >> $GITHUB_ENV
        echo "NEXT_TAG=v${next_version}" >> $GITHUB_ENV

    - name: Compare digests and build if changed
      id: compare_and_build
      run: |
        if [ "${{ env.BASE_IMAGE_DIGEST }}" != "${{ env.LATEST_BODY }}" ]; then
          echo "Base image has changed. Building the Docker image."
          echo "BASE_IMAGE_CHANGED=true" >> $GITHUB_ENV
          docker buildx build --platform linux/amd64 --build-arg BASE_IMAGE=${{ vars.BASE_IMAGE }} --tag ${{ secrets.DOCKER_USERNAME }}/udi:latest --tag ${{ secrets.DOCKER_USERNAME }}/udi:${{ env.NEXT_VERSION }} --push
        else
          echo "Base image has not changed. Skipping the build."
          echo "BASE_IMAGE_CHANGED=false" >> $GITHUB_ENV
        fi

    - name: Create a new release with version tag
      if: env.BASE_IMAGE_CHANGED == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEXT_TAG }}
        release_name: ${{ env.NEXT_TAG }}
        body: ${{ env.BASE_IMAGE_DIGEST }}
        draft: false
        prerelease: false

    - name: Delete existing latest release
      if: env.BASE_IMAGE_CHANGED == 'true'
      run: |
        if gh release view latest > /dev/null 2>&1; then
          gh release delete latest --yes
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create latest release
      if: env.BASE_IMAGE_CHANGED == 'true'
      run: |
        gh release create latest --title "Latest Release" --notes "${{ env.BASE_IMAGE_DIGEST }}" --target "$(git rev-parse HEAD)" --draft=false --prerelease=false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
